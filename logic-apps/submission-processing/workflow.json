{
  "definition": {
    "$schema": "https://schema.management.azure.com/providers/Microsoft.Logic/schemas/2016-06-01/workflowdefinition.json#",
    "actions": {
      "Parse_JSON": {
        "type": "ParseJson",
        "inputs": {
          "content": "@triggerBody()?['contentData']",
          "schema": {
            "type": "object",
            "properties": {
              "submissionId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              },
              "documentUrls": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "submittedAt": {
                "type": "string"
              }
            },
            "required": [
              "submissionId",
              "userId",
              "documentUrls",
              "submittedAt"
            ]
          }
        },
        "runAfter": {}
      },
      "For_each_document_in_submission": {
        "type": "foreach",
        "foreach": "@outputs('Parse_JSON')['body']['documentUrls']",
        "actions": {
          "Read_blob_content": {
            "type": "ServiceProvider",
            "inputs": {
              "parameters": {
                "containerName": "@body('Parse_JSON')['submissionId']",
                "blobName": "@last(split(item(), '/'))"
              },
              "serviceProviderConfiguration": {
                "connectionName": "AzureBlob",
                "operationId": "readBlob",
                "serviceProviderId": "/serviceProviders/AzureBlob"
              }
            }
          },
          "Is_not_body_txt": {
            "type": "If",
            "expression": {
              "and": [
                {
                  "not": {
                    "contains": [
                      "@last(split(item(), '/'))",
                      ".txt"
                    ]
                  }
                }
              ]
            },
            "actions": {
              "Document_Intelligence_extract_as_Markdown": {
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "referenceName": "formrecognizer-1"
                    }
                  },
                  "method": "post",
                  "body": "@body('Read_blob_content')?['content']",
                  "path": "/connectorinternaldocumentintelligence/documentModels/@{encodeURIComponent('prebuilt-layout')}:analyze",
                  "queries": {
                    "api-version": "2024-11-30",
                    "outputContentFormat": "markdown"
                  }
                }
              },
              "LLM_extraction": {
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "referenceName": "azureopenai-1"
                    }
                  },
                  "method": "post",
                  "body": {
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are an intelligent document data extractor. Your task is to:\n\n1. Read the text provided in the user message.\n2. Extract specific data fields from the document.\n3. For invoices, extract key billing information including invoice number, total amount, currency, due date, and vendor details.\n\nRespond with a JSON object in the following format:\n{\n  \"invoiceNumber\": \"<invoice or reference number (string)>\",\n  \"totalAmount\": <total amount due as number, no currency symbol>,\n  \"currency\": \"<three-letter currency code (e.g., USD, EUR, GBP)>\",\n  \"dueDate\": \"<due date in YYYY-MM-DD format>\",\n  \"vendor\": \"<vendor or company name>\"\n}\n\nField descriptions:\n- invoiceNumber: The unique identifier for the invoice (e.g., \"INV-2025-001\", \"12345\")\n- totalAmount: The total amount due as a numeric value without currency symbols\n- currency: The currency code in ISO 4217 format (USD, EUR, GBP, etc.)\n- dueDate: The payment due date in ISO 8601 date format (YYYY-MM-DD)\n- vendor: The name of the company or vendor issuing the invoice\n\nIf any field cannot be found in the document, use null as the value.\nOnly output valid JSON. Do not include any explanations or extra text.\n"
                      },
                      {
                        "role": "user",
                        "content": "@body('Document_Intelligence_extract_as_Markdown')?['analyzeResult']?['content']"
                      }
                    ],
                    "temperature": 0.1,
                    "top_p": 1,
                    "stream": false,
                    "stop": null,
                    "max_tokens": 8192,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "n": 1,
                    "seed": 0,
                    "logprobs": false,
                    "response_format": {
                      "type": "json_object"
                    }
                  },
                  "path": "/2024-02-15-preview/deployments/@{encodeURIComponent('gpt-4.1')}/chat/completions",
                  "queries": {
                    "api-version": "2024-08-01-preview"
                  },
                  "retryPolicy": {
                    "type": "exponential",
                    "count": 50,
                    "interval": "PT10S",
                    "minimumInterval": "PT10S",
                    "maximumInterval": "PT120S"
                  }
                },
                "runAfter": {
                  "Document_Intelligence_extract_as_Markdown": [
                    "SUCCEEDED"
                  ]
                }
              },
              "LLM_classification": {
                "type": "ApiConnection",
                "inputs": {
                  "host": {
                    "connection": {
                      "referenceName": "azureopenai-1"
                    }
                  },
                  "method": "post",
                  "body": {
                    "messages": [
                      {
                        "role": "system",
                        "content": "You are an intelligent document summarizer. Your task is to:\n\n1. Read the text provided in the user message.\n2. Extract and summarize the key content of the document in a single, concise paragraph.\n3. Decide the type of document. Choose one of the following categories: `invoice`, `contract`, `bankStatement`, `submissionNotes`, or `other`.\n\nRespond with a JSON object in the following format:\n{\n  \"type\": \"<one of: invoice, contract, bankStatement, submissionNotes, other>\",\n  \"summary\": \"<one-paragraph summary of the document's key content>\"\n}\n\nOnly output valid JSON. Do not include any explanations or extra text.\n"
                      },
                      {
                        "role": "user",
                        "content": "@body('Document_Intelligence_extract_as_Markdown')?['analyzeResult']?['content']"
                      }
                    ],
                    "temperature": 0.1,
                    "top_p": 1,
                    "stream": false,
                    "stop": null,
                    "max_tokens": 4096,
                    "presence_penalty": 0,
                    "frequency_penalty": 0,
                    "n": 1,
                    "seed": 0,
                    "logprobs": false,
                    "response_format": {
                      "type": "json_object"
                    }
                  },
                  "path": "/2024-02-15-preview/deployments/@{encodeURIComponent('gpt-4.1')}/chat/completions",
                  "queries": {
                    "api-version": "2024-08-01-preview"
                  },
                  "retryPolicy": {
                    "type": "exponential",
                    "count": 50,
                    "interval": "PT10S",
                    "minimumInterval": "PT10S",
                    "maximumInterval": "PT120S"
                  }
                },
                "runAfter": {
                  "Document_Intelligence_extract_as_Markdown": [
                    "SUCCEEDED"
                  ]
                }
              },
              "Index_a_document": {
                "type": "ServiceProvider",
                "inputs": {
                  "parameters": {
                    "indexName": "documents-index-logicapp",
                    "document": {
                      "id": "@guid()",
                      "content": "@body('Document_Intelligence_extract_as_Markdown')?['analyzeResult']?['content']",
                      "documentId": "@guid()",
                      "documentUrl": "@body('Read_blob_content')?['properties']?['blobFullPathWithContainer']",
                      "submissionId": "@body('Parse_JSON')['submissionId']",
                      "userId": "@body('Parse_JSON')['userId']"
                    }
                  },
                  "serviceProviderConfiguration": {
                    "connectionName": "azureaisearch-3",
                    "operationId": "indexDocument",
                    "serviceProviderId": "/serviceProviders/azureaisearch"
                  }
                },
                "runAfter": {
                  "Document_Intelligence_extract_as_Markdown": [
                    "SUCCEEDED"
                  ]
                }
              }
            },
            "else": {
              "actions": {
                "Set_variable": {
                  "type": "SetVariable",
                  "inputs": {
                    "name": "body",
                    "value": "@{body('Read_blob_content')?['content']}"
                  }
                }
              }
            },
            "runAfter": {
              "Read_blob_content": [
                "SUCCEEDED"
              ]
            }
          }
        },
        "runAfter": {
          "Initialize_body_variable": [
            "SUCCEEDED"
          ]
        }
      },
      "Get_index_in_AI_Search": {
        "type": "Http",
        "inputs": {
          "uri": "https://search-email-dev-vwyh.search.windows.net/indexes/documents-index-logicapp",
          "method": "GET",
          "queries": {
            "api-version": "2023-11-01"
          },
          "authentication": {
            "type": "ManagedServiceIdentity",
            "audience": "https://search.azure.com"
          }
        },
        "runAfter": {},
        "runtimeConfiguration": {
          "contentTransfer": {
            "transferMode": "Chunked"
          }
        }
      },
      "Is_missing": {
        "type": "If",
        "expression": {
          "and": [
            {
              "equals": [
                "@outputs('Get_index_in_AI_Search')?['statusCode']",
                404
              ]
            }
          ]
        },
        "actions": {
          "Create_index_in_AI_Search": {
            "type": "Http",
            "inputs": {
              "uri": "https://search-email-dev-vwyh.search.windows.net/indexes",
              "method": "POST",
              "headers": {
                "Content-Type": "application/json"
              },
              "queries": {
                "api-version": "2024-07-01"
              },
              "body": {
                "name": "documents-index-logicapp",
                "fields": [
                  {
                    "name": "id",
                    "type": "Edm.String",
                    "searchable": false,
                    "filterable": false,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": true,
                    "synonymMaps": []
                  },
                  {
                    "name": "content",
                    "type": "Edm.String",
                    "searchable": true,
                    "filterable": false,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "analyzer": "en.microsoft",
                    "synonymMaps": []
                  },
                  {
                    "name": "contentVector",
                    "type": "Collection(Edm.Single)",
                    "searchable": true,
                    "filterable": false,
                    "retrievable": false,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "dimensions": 3072,
                    "vectorSearchProfile": "default",
                    "synonymMaps": []
                  },
                  {
                    "name": "documentId",
                    "type": "Edm.String",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  },
                  {
                    "name": "documentUrl",
                    "type": "Edm.String",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  },
                  {
                    "name": "submissionId",
                    "type": "Edm.String",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  },
                  {
                    "name": "userId",
                    "type": "Edm.String",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  },
                  {
                    "name": "chunkIndex",
                    "type": "Edm.Int32",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": false,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  },
                  {
                    "name": "timestamp",
                    "type": "Edm.DateTimeOffset",
                    "searchable": false,
                    "filterable": true,
                    "retrievable": true,
                    "sortable": true,
                    "facetable": false,
                    "key": false,
                    "synonymMaps": []
                  }
                ],
                "scoringProfiles": [],
                "suggesters": [],
                "analyzers": [],
                "tokenizers": [],
                "tokenFilters": [],
                "charFilters": [],
                "similarity": {
                  "@{'@odata.type'}": "#Microsoft.Azure.Search.BM25Similarity"
                },
                "semantic": {
                  "configurations": [
                    {
                      "name": "default-semantic-config",
                      "prioritizedFields": {
                        "prioritizedContentFields": [
                          {
                            "fieldName": "content"
                          }
                        ],
                        "prioritizedKeywordsFields": []
                      }
                    }
                  ]
                },
                "vectorSearch": {
                  "algorithms": [
                    {
                      "name": "default-algorithm",
                      "kind": "hnsw",
                      "hnswParameters": {
                        "metric": "cosine",
                        "m": 4,
                        "efConstruction": 400,
                        "efSearch": 500
                      }
                    }
                  ],
                  "profiles": [
                    {
                      "name": "default",
                      "algorithm": "default-algorithm",
                      "vectorizer": "openai-vectorizer"
                    }
                  ],
                  "vectorizers": [
                    {
                      "name": "openai-vectorizer",
                      "kind": "azureOpenAI",
                      "azureOpenAIParameters": {
                        "resourceUri": "https://openai-email-dev-vwyh.openai.azure.com",
                        "deploymentId": "text-embedding-3-large",
                        "modelName": "text-embedding-3-large"
                      }
                    }
                  ],
                  "compressions": []
                }
              },
              "authentication": {
                "type": "ManagedServiceIdentity",
                "audience": "https://search.azure.com"
              }
            },
            "runtimeConfiguration": {
              "contentTransfer": {
                "transferMode": "Chunked"
              }
            }
          }
        },
        "else": {
          "actions": {}
        },
        "runAfter": {
          "Get_index_in_AI_Search": [
            "SUCCEEDED",
            "FAILED",
            "TIMEDOUT",
            "SKIPPED"
          ]
        }
      },
      "Initialize_body_variable": {
        "type": "InitializeVariable",
        "inputs": {
          "variables": [
            {
              "name": "body",
              "type": "string"
            }
          ]
        },
        "runAfter": {
          "Parse_JSON": [
            "SUCCEEDED"
          ]
        }
      },
      "Create_Thread": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "referenceName": "azureagentservice-1"
            }
          },
          "method": "post",
          "body": {
            "messages": [
              {
                "role": "user",
                "content": "@variables('body')"
              }
            ]
          },
          "path": "/threads",
          "queries": {
            "api-version": "2025-05-01"
          }
        },
        "runAfter": {
          "For_each_document_in_submission": [
            "SUCCEEDED"
          ]
        }
      },
      "Create_Run": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "referenceName": "azureagentservice-1"
            }
          },
          "method": "post",
          "body": {
            "assistant_id": "asst_2jBYo7I8HpSzTixVnzPdgzbf",
            "temperature": 1,
            "top_p": 1
          },
          "path": "/threads/@{encodeURIComponent(body('Create_Thread')['id'])}/runs",
          "queries": {
            "api-version": "2025-05-01"
          }
        },
        "runAfter": {
          "Create_Thread": [
            "SUCCEEDED"
          ]
        }
      },
      "Get_Run": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "referenceName": "azureagentservice-1"
            }
          },
          "method": "post",
          "path": "/threads/@{encodeURIComponent(body('Create_Thread')['id'])}/runs/@{encodeURIComponent(body('Create_Run')?['id'])}",
          "queries": {
            "api-version": "2025-05-01"
          }
        },
        "runAfter": {
          "Delay_2_minutes": [
            "SUCCEEDED"
          ]
        }
      },
      "Delay_2_minutes": {
        "type": "Wait",
        "inputs": {
          "interval": {
            "count": 2,
            "unit": "Minute"
          }
        },
        "runAfter": {
          "Create_Run": [
            "SUCCEEDED"
          ]
        }
      },
      "Agent_output": {
        "type": "Compose",
        "inputs": "@body('List_Messages')['data'][0]['content'][0]['text']['value']",
        "runAfter": {
          "List_Messages": [
            "SUCCEEDED"
          ]
        }
      },
      "List_Messages": {
        "type": "ApiConnection",
        "inputs": {
          "host": {
            "connection": {
              "referenceName": "azureagentservice-1"
            }
          },
          "method": "get",
          "path": "/threads/@{encodeURIComponent(body('Create_Thread')['id'])}/messages",
          "queries": {
            "api-version": "2025-05-01"
          }
        },
        "runAfter": {
          "Get_Run": [
            "SUCCEEDED"
          ]
        }
      },
      "Compose_message": {
        "type": "Compose",
        "inputs": {
          "submissionId": "@{body('Parse_JSON')['submissionId']}",
          "userId": "@{body('Parse_JSON')['userId']}",
          "submittedAt": "@{body('Parse_JSON')['submittedAt']}",
          "processedAt": "@{formatDateTime(utcNow(), 'yyyy-MM-ddTHH:mm:ss.fffZ')\r\n}",
          "results": "@{outputs('Agent_output')}"
        },
        "runAfter": {
          "Agent_output": [
            "SUCCEEDED"
          ]
        }
      },
      "Send_message": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "entityName": "processed-submissions",
            "message": {
              "contentData": "@outputs('Compose_message')",
              "contentType": "application/json"
            }
          },
          "serviceProviderConfiguration": {
            "connectionName": "serviceBus",
            "operationId": "sendMessage",
            "serviceProviderId": "/serviceProviders/serviceBus"
          }
        },
        "runAfter": {
          "Compose_message": [
            "SUCCEEDED"
          ]
        }
      }
    },
    "contentVersion": "1.0.0.0",
    "outputs": {},
    "triggers": {
      "When_messages_are_available_in_a_topic": {
        "type": "ServiceProvider",
        "inputs": {
          "parameters": {
            "topicName": "new-submissions",
            "subscriptionName": "submission-intake-logicapp",
            "isSessionsEnabled": false
          },
          "serviceProviderConfiguration": {
            "connectionName": "serviceBus",
            "operationId": "receiveTopicMessages",
            "serviceProviderId": "/serviceProviders/serviceBus"
          }
        },
        "splitOn": "@triggerOutputs()?['body']"
      }
    }
  },
  "kind": "Agentic"
}